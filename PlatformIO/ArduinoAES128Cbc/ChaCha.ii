# 1 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/Cipher.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/Cipher.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/Cipher.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/Cipher.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/Cipher.h"
class Cipher
{
public:
    Cipher();
    virtual ~Cipher();

    virtual size_t keySize() const = 0;
    virtual size_t ivSize() const = 0;

    virtual bool setKey(const uint8_t *key, size_t len) = 0;
    virtual bool setIV(const uint8_t *iv, size_t len) = 0;

    virtual void encrypt(uint8_t *output, const uint8_t *input, size_t len) = 0;
    virtual void decrypt(uint8_t *output, const uint8_t *input, size_t len) = 0;

    virtual void clear() = 0;
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.h" 2

class ChaChaPoly;

class ChaCha : public Cipher
{
public:
    explicit ChaCha(uint8_t numRounds = 20);
    virtual ~ChaCha();

    size_t keySize() const;
    size_t ivSize() const;

    uint8_t numRounds() const { return rounds; }
    void setNumRounds(uint8_t numRounds) { rounds = numRounds; }

    bool setKey(const uint8_t *key, size_t len);
    bool setIV(const uint8_t *iv, size_t len);
    bool setCounter(const uint8_t *counter, size_t len);

    void encrypt(uint8_t *output, const uint8_t *input, size_t len);
    void decrypt(uint8_t *output, const uint8_t *input, size_t len);

    void clear();

    static void hashCore(uint32_t *output, const uint32_t *input, uint8_t rounds);

private:
    uint8_t block[64];
    uint8_t stream[64];
    uint8_t rounds;
    uint8_t posn;

    void keystreamBlock(uint32_t *output);

    friend class ChaChaPoly;
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 2

void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
}

bool secure_compare(const void *data1, const void *data2, size_t len);
# 25 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/RotateUtil.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/EndianUtil.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 1 3
# 89 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 90 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 2 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 1 3
# 99 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/sfr_defs.h" 1 3
# 100 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 272 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/iom328p.h" 1 3
# 273 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 627 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/portpins.h" 1 3
# 628 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3

# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/common.h" 1 3
# 630 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3

# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/version.h" 1 3
# 632 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3






# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 1 3
# 239 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 3

# 239 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3


# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/lock.h" 1 3
# 642 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 91 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 2 3
# 116 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern "C" {
# 1158 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const void * memchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1172 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int memcmp_P(const void *, const void *, size_t) __attribute__((__pure__));






extern void *memccpy_P(void *, const void *, int __val, size_t);
# 1188 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_P(void *, const void *, size_t);






extern void *memmem_P(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 1207 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const void * memrchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcat_P(char *, const char *);
# 1233 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strchr_P(const char *, int __val) __attribute__((__const__));
# 1245 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strchrnul_P(const char *, int __val) __attribute__((__const__));
# 1258 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcmp_P(const char *, const char *) __attribute__((__pure__));
# 1268 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_P(char *, const char *);
# 1285 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_P(const char *, const char *) __attribute__((__pure__));






extern char *strcasestr_P(const char *, const char *) __attribute__((__pure__));
# 1305 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strcspn_P(const char *__s, const char * __reject) __attribute__((__pure__));
# 1321 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_P (char *, const char *, size_t );
# 1334 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_P (char *, const char *, size_t );
# 1346 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_P(const char *, size_t) __attribute__((__const__));
# 1357 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1376 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1387 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncat_P(char *, const char *, size_t);
# 1401 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_P(char *, const char *, size_t);
# 1416 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strpbrk_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1427 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strrchr_P(const char *, int __val) __attribute__((__const__));
# 1447 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strsep_P(char **__sp, const char * __delim);
# 1460 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strspn_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1474 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strstr_P(const char *, const char *) __attribute__((__pure__));
# 1496 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strtok_P(char *__s, const char * __delim);
# 1516 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strtok_rP(char *__s, const char * __delim, char **__last);
# 1529 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlen_PF(uint_farptr_t src) __attribute__((__const__));
# 1545 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_PF(uint_farptr_t src, size_t len) __attribute__((__const__));
# 1560 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
# 1575 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_PF(char *dest, uint_farptr_t src);
# 1595 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
# 1611 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcat_PF(char *dest, uint_farptr_t src);
# 1632 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
# 1649 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
# 1665 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1682 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1698 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1716 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1732 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strstr_PF(const char *s1, uint_farptr_t s2);
# 1744 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
# 1760 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int memcmp_PF(const void *, uint_farptr_t, size_t) __attribute__((__pure__));
# 1779 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t __strlen_P(const char *) __attribute__((__const__));
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
}



}
# 28 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h" 2
# 28 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 1 3
# 46 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 47 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 2 3
# 58 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern "C" {
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memset(void *, int, size_t);
# 248 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcat(char *, const char *);
# 262 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcpy(char *, const char *);
# 320 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strdup(const char *s1);
# 377 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strlwr(char *);
# 422 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrev(char *);
# 533 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strsep(char **, const char *);
# 544 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok(char *, const char *);
# 593 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 29 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 2
# 47 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"

# 47 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
ChaCha::ChaCha(uint8_t numRounds)
    : rounds(numRounds)
    , posn(64)
{
}

ChaCha::~ChaCha()
{
    clean(block);
    clean(stream);
}

size_t ChaCha::keySize() const
{

    return 32;
}

size_t ChaCha::ivSize() const
{

    return 8;
}
# 87 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
bool ChaCha::setKey(const uint8_t *key, size_t len)
{
    static const char tag128[] 
# 89 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 3
                              __attribute__((__progmem__)) 
# 89 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
                                      = "expand 16-byte k";
    static const char tag256[] 
# 90 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp" 3
                              __attribute__((__progmem__)) 
# 90 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
                                      = "expand 32-byte k";
    if (len <= 16) {
        memcpy_P(block, tag128, 16);
        memcpy(block + 16, key, len);
        memcpy(block + 32, key, len);
        if (len < 16) {
            memset(block + 16 + len, 0, 16 - len);
            memset(block + 32 + len, 0, 16 - len);
        }
    } else {
        if (len > 32)
            len = 32;
        memcpy_P(block, tag256, 16);
        memcpy(block + 16, key, len);
        if (len < 32)
            memset(block + 16 + len, 0, 32 - len);
    }
    posn = 64;
    return true;
}

bool ChaCha::setIV(const uint8_t *iv, size_t len)
{



    if (len == 8) {
        memset(block + 48, 0, 8);
        memcpy(block + 56, iv, len);
        posn = 64;
        return true;
    } else if (len == 12) {
        memset(block + 48, 0, 4);
        memcpy(block + 52, iv, len);
        posn = 64;
        return true;
    } else {
        return false;
    }
}
# 145 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
bool ChaCha::setCounter(const uint8_t *counter, size_t len)
{


    if (len == 4 || len == 8) {
        memcpy(block + 48, counter, len);
        posn = 64;
        return true;
    } else {
        return false;
    }
}

void ChaCha::encrypt(uint8_t *output, const uint8_t *input, size_t len)
{
    while (len > 0) {
        if (posn >= 64) {

            hashCore((uint32_t *)stream, (const uint32_t *)block, rounds);
            posn = 0;





            uint16_t temp = 1;
            uint8_t index = 48;
            while (index < 56) {
                temp += block[index];
                block[index] = (uint8_t)temp;
                temp >>= 8;
                ++index;
            }
        }
        uint8_t templen = 64 - posn;
        if (templen > len)
            templen = len;
        len -= templen;
        while (templen > 0) {
            *output++ = *input++ ^ stream[posn++];
            --templen;
        }
    }
}

void ChaCha::decrypt(uint8_t *output, const uint8_t *input, size_t len)
{
    encrypt(output, input, len);
}
# 207 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
void ChaCha::keystreamBlock(uint32_t *output)
{

    hashCore(output, (const uint32_t *)block, rounds);
    posn = 64;



    block[48] = 1;
}

void ChaCha::clear()
{
    clean(block);
    clean(stream);
    posn = 64;
}
# 253 "/home/whistleblower/.platformio/lib/Crypto/ChaCha.cpp"
void ChaCha::hashCore(uint32_t *output, const uint32_t *input, uint8_t rounds)
{
    uint8_t posn;



    for (posn = 0; posn < 16; ++posn)
        output[posn] = (input[posn]);


    for (; rounds >= 2; rounds -= 2) {

        do { uint32_t _b = (output[4]); uint32_t _a = (output[0]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[12]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[8]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[12]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[0]) = _a; (output[4]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[8]) = _c; } while (0);
        do { uint32_t _b = (output[5]); uint32_t _a = (output[1]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[13]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[9]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[13]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[1]) = _a; (output[5]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[9]) = _c; } while (0);
        do { uint32_t _b = (output[6]); uint32_t _a = (output[2]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[14]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[10]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[14]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[2]) = _a; (output[6]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[10]) = _c; } while (0);
        do { uint32_t _b = (output[7]); uint32_t _a = (output[3]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[15]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[11]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[15]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[3]) = _a; (output[7]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[11]) = _c; } while (0);


        do { uint32_t _b = (output[5]); uint32_t _a = (output[0]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[15]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[10]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[15]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[0]) = _a; (output[5]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[10]) = _c; } while (0);
        do { uint32_t _b = (output[6]); uint32_t _a = (output[1]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[12]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[11]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[12]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[1]) = _a; (output[6]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[11]) = _c; } while (0);
        do { uint32_t _b = (output[7]); uint32_t _a = (output[2]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[13]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[8]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[13]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[2]) = _a; (output[7]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[8]) = _c; } while (0);
        do { uint32_t _b = (output[4]); uint32_t _a = (output[3]) + _b; uint32_t _d = (__extension__ ({ uint32_t _temp = ((output[14]) ^ _a); (_temp << (16)) | (_temp >> (32 - (16))); })); uint32_t _c = (output[9]) + _d; _b = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (16)) | (_temp >> (32 - (16))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); _a += _b; (output[14]) = _d = (__extension__ ({ uint32_t _temp = (_d ^ _a); (_temp << (8)) | (_temp >> (32 - (8))); })); _c += _d; (output[3]) = _a; (output[4]) = ((__extension__ ({ uint32_t _temp = ((__extension__ ({ uint32_t _temp = ((_b ^ _c)); (_temp << (8)) | (_temp >> (32 - (8))); }))); (_temp >> (1)) | (_temp << (32 - (1))); }))); (output[9]) = _c; } while (0);
    }



    for (posn = 0; posn < 16; ++posn)
        output[posn] = (output[posn] + (input[posn]));
}
