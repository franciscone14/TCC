# 1 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/Speck.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/Speck.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
class BlockCipher
{
public:
    BlockCipher();
    virtual ~BlockCipher();

    virtual size_t blockSize() const = 0;
    virtual size_t keySize() const = 0;

    virtual bool setKey(const uint8_t *key, size_t len) = 0;

    virtual void encryptBlock(uint8_t *output, const uint8_t *input) = 0;
    virtual void decryptBlock(uint8_t *output, const uint8_t *input) = 0;

    virtual void clear() = 0;
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/Speck.h" 2

class Speck : public BlockCipher
{
public:
    Speck();
    virtual ~Speck();

    size_t blockSize() const;
    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint64_t k[34];
    uint8_t rounds;
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 2

void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
}

bool secure_compare(const void *data1, const void *data2, size_t len);
# 25 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/RotateUtil.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/EndianUtil.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 1 3
# 46 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 47 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 2 3
# 58 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3

# 58 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern "C" {
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memset(void *, int, size_t);
# 248 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcat(char *, const char *);
# 262 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcpy(char *, const char *);
# 320 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strdup(const char *s1);
# 377 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strlwr(char *);
# 422 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrev(char *);
# 533 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strsep(char **, const char *);
# 544 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok(char *, const char *);
# 593 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 28 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp" 2
# 72 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"

# 72 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
Speck::Speck()
    : rounds(32)
{
}

Speck::~Speck()
{
    clean(k);
}

size_t Speck::blockSize() const
{
    return 16;
}

size_t Speck::keySize() const
{

    return 32;
}
# 105 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
bool Speck::setKey(const uint8_t *key, size_t len)
{


    uint64_t l[4];
    uint8_t m, mb;
    if (len == 32) {
        m = 4;
        mb = 3 * 8;
    } else if (len == 24) {
        m = 3;
        mb = 2 * 8;
    } else if (len == 16) {
        m = 2;
        mb = 8;
    } else {
        return false;
    }
    rounds = 30 + m;
    uint8_t r = rounds - 1;
    __asm__ __volatile__ (
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "sbiw r30,8\n"
        "movw r10,r30\n"
        "movw r30,%A2\n"
        "ldd r8,%3\n"
        "1:\n"
        "ld __tmp_reg__,-X\n"
        "st Z+,__tmp_reg__\n"
        "dec r8\n"
        "brne 1b\n"
        "movw r26,%A2\n"
        "movw r30,r10\n"
        "clr %A2\n"
        "ldd %B2,%3\n"
        "clr r25\n"
        "ld r16,Z+\n"
        "ld r17,Z+\n"
        "ld r18,Z+\n"
        "ld r19,Z+\n"
        "ld r20,Z+\n"
        "ld r21,Z+\n"
        "ld r22,Z+\n"
        "ld r23,Z+\n"
        "2:\n"
        "add r26,%A2\n"
        "adc r27,__zero_reg__\n"
        "ld r15,X+\n"
        "ld r8,X+\n"
        "ld r9,X+\n"
        "ld r10,X+\n"
        "ld r11,X+\n"
        "ld r12,X+\n"
        "ld r13,X+\n"
        "ld r14,X+\n"
        "sub r26,%A2\n"
        "sbc r27,__zero_reg__\n"
        "sbiw r26,8\n"
        "add r8,r16\n"
        "adc r9,r17\n"
        "adc r10,r18\n"
        "adc r11,r19\n"
        "adc r12,r20\n"
        "adc r13,r21\n"
        "adc r14,r22\n"
        "adc r15,r23\n"
        "eor r8,r25\n"
        "add r26,%B2\n"
        "adc r27,__zero_reg__\n"
        "st X+,r8\n"
        "st X+,r9\n"
        "st X+,r10\n"
        "st X+,r11\n"
        "st X+,r12\n"
        "st X+,r13\n"
        "st X+,r14\n"
        "st X+,r15\n"
        "sub r26,%B2\n"
        "sbc r27,__zero_reg__\n"
        "sbiw r26,8\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "eor r16,r8\n"
        "eor r17,r9\n"
        "eor r18,r10\n"
        "eor r19,r11\n"
        "eor r20,r12\n"
        "eor r21,r13\n"
        "eor r22,r14\n"
        "eor r23,r15\n"
        "st Z+,r16\n"
        "st Z+,r17\n"
        "st Z+,r18\n"
        "st Z+,r19\n"
        "st Z+,r20\n"
        "st Z+,r21\n"
        "st Z+,r22\n"
        "st Z+,r23\n"
        "ldi r24,8\n"
        "add %A2,r24\n"
        "add %B2,r24\n"
        "ldi r24,0x1F\n"
        "and %A2,r24\n"
        "and %B2,r24\n"
        "ldd r8,%4\n"
        "inc r25\n"
        "cp r25,r8\n"
        "breq 3f\n"
        "rjmp 2b\n"
        "3:\n"
        "ldi r24,32\n"
        "4:\n"
        "st X+,__zero_reg__\n"
        "dec r24\n"
        "brne 4b\n"
        : : "z"(k), "x"(key + len), "r"(l), "Q"(mb), "Q"(r)
        : "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
          "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "memory"
        , "r24", "r25"
    );
    return true;
# 301 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
}

void Speck::encryptBlock(uint8_t *output, const uint8_t *input)
{


    __asm__ __volatile__ (
        "ld r15,X+\n"
        "ld r14,X+\n"
        "ld r13,X+\n"
        "ld r12,X+\n"
        "ld r11,X+\n"
        "ld r10,X+\n"
        "ld r9,X+\n"
        "ld r8,X+\n"
        "ld r23,X+\n"
        "ld r22,X+\n"
        "ld r21,X+\n"
        "ld r20,X+\n"
        "ld r19,X+\n"
        "ld r18,X+\n"
        "ld r17,X+\n"
        "ld r16,X\n"
        "1:\n"
        "add r9,r16\n"
        "adc r10,r17\n"
        "adc r11,r18\n"
        "adc r12,r19\n"
        "adc r13,r20\n"
        "adc r14,r21\n"
        "adc r15,r22\n"
        "adc r8,r23\n"
        "ld __tmp_reg__,Z+\n"
        "eor __tmp_reg__,r9\n"
        "ld r9,Z+\n"
        "eor r9,r10\n"
        "ld r10,Z+\n"
        "eor r10,r11\n"
        "ld r11,Z+\n"
        "eor r11,r12\n"
        "ld r12,Z+\n"
        "eor r12,r13\n"
        "ld r13,Z+\n"
        "eor r13,r14\n"
        "ld r14,Z+\n"
        "eor r14,r15\n"
        "ld r15,Z+\n"
        "eor r15,r8\n"
        "mov r8,__tmp_reg__\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "lsl r16\n"
        "rol r17\n"
        "rol r18\n"
        "rol r19\n"
        "rol r20\n"
        "rol r21\n"
        "rol r22\n"
        "rol r23\n"
        "adc r16, __zero_reg__\n"
        "eor r16,r8\n"
        "eor r17,r9\n"
        "eor r18,r10\n"
        "eor r19,r11\n"
        "eor r20,r12\n"
        "eor r21,r13\n"
        "eor r22,r14\n"
        "eor r23,r15\n"
        "dec %2\n"
        "breq 2f\n"
        "rjmp 1b\n"
        "2:\n"
        "ldd r26,%A3\n"
        "ldd r27,%B3\n"
        "st X+,r15\n"
        "st X+,r14\n"
        "st X+,r13\n"
        "st X+,r12\n"
        "st X+,r11\n"
        "st X+,r10\n"
        "st X+,r9\n"
        "st X+,r8\n"
        "st X+,r23\n"
        "st X+,r22\n"
        "st X+,r21\n"
        "st X+,r20\n"
        "st X+,r19\n"
        "st X+,r18\n"
        "st X+,r17\n"
        "st X,r16\n"
        : : "x"(input), "z"(k), "r"(rounds), "Q"(output)
        : "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
          "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "memory"
    );
# 423 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
}

void Speck::decryptBlock(uint8_t *output, const uint8_t *input)
{


    __asm__ __volatile__ (
        "ld r15,X+\n"
        "ld r14,X+\n"
        "ld r13,X+\n"
        "ld r12,X+\n"
        "ld r11,X+\n"
        "ld r10,X+\n"
        "ld r9,X+\n"
        "ld r8,X+\n"
        "ld r23,X+\n"
        "ld r22,X+\n"
        "ld r21,X+\n"
        "ld r20,X+\n"
        "ld r19,X+\n"
        "ld r18,X+\n"
        "ld r17,X+\n"
        "ld r16,X\n"
        "1:\n"
        "eor r16,r8\n"
        "eor r17,r9\n"
        "eor r18,r10\n"
        "eor r19,r11\n"
        "eor r20,r12\n"
        "eor r21,r13\n"
        "eor r22,r14\n"
        "eor r23,r15\n"
        "bst r16,0\n"
        "ror r23\n"
        "ror r22\n"
        "ror r21\n"
        "ror r20\n"
        "ror r19\n"
        "ror r18\n"
        "ror r17\n"
        "ror r16\n"
        "bld r23,7\n"
        "bst r16,0\n"
        "ror r23\n"
        "ror r22\n"
        "ror r21\n"
        "ror r20\n"
        "ror r19\n"
        "ror r18\n"
        "ror r17\n"
        "ror r16\n"
        "bld r23,7\n"
        "bst r16,0\n"
        "ror r23\n"
        "ror r22\n"
        "ror r21\n"
        "ror r20\n"
        "ror r19\n"
        "ror r18\n"
        "ror r17\n"
        "ror r16\n"
        "bld r23,7\n"
        "ld __tmp_reg__,-Z\n"
        "eor __tmp_reg__,r15\n"
        "ld r15,-Z\n"
        "eor r15,r14\n"
        "ld r14,-Z\n"
        "eor r14,r13\n"
        "ld r13,-Z\n"
        "eor r13,r12\n"
        "ld r12,-Z\n"
        "eor r12,r11\n"
        "ld r11,-Z\n"
        "eor r11,r10\n"
        "ld r10,-Z\n"
        "eor r10,r9\n"
        "ld r9,-Z\n"
        "eor r9,r8\n"
        "mov r8,__tmp_reg__\n"
        "sub r9,r16\n"
        "sbc r10,r17\n"
        "sbc r11,r18\n"
        "sbc r12,r19\n"
        "sbc r13,r20\n"
        "sbc r14,r21\n"
        "sbc r15,r22\n"
        "sbc r8,r23\n"
        "dec %2\n"
        "breq 2f\n"
        "rjmp 1b\n"
        "2:\n"
        "ldd r26,%A3\n"
        "ldd r27,%B3\n"
        "st X+,r15\n"
        "st X+,r14\n"
        "st X+,r13\n"
        "st X+,r12\n"
        "st X+,r11\n"
        "st X+,r10\n"
        "st X+,r9\n"
        "st X+,r8\n"
        "st X+,r23\n"
        "st X+,r22\n"
        "st X+,r21\n"
        "st X+,r20\n"
        "st X+,r19\n"
        "st X+,r18\n"
        "st X+,r17\n"
        "st X,r16\n"
        : : "x"(input), "z"(k + rounds), "r"(rounds), "Q"(output)
        : "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
          "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23", "memory"
    );
# 548 "/home/whistleblower/.platformio/lib/Crypto/Speck.cpp"
}

void Speck::clear()
{
    clean(k);
}
