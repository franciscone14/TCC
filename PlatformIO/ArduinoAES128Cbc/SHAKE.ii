# 1 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/XOF.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/XOF.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/XOF.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/XOF.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/XOF.h"
class XOF
{
public:
    XOF();
    virtual ~XOF();

    virtual size_t blockSize() const = 0;

    virtual void reset() = 0;
    virtual void update(const void *data, size_t len) = 0;

    virtual void extend(uint8_t *data, size_t len) = 0;
    virtual void encrypt(uint8_t *output, const uint8_t *input, size_t len) = 0;

    inline void decrypt(uint8_t *output, const uint8_t *input, size_t len)
    {
        encrypt(output, input, len);
    }

    virtual void clear() = 0;
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.h" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h" 2

class KeccakCore
{
public:
    KeccakCore();
    ~KeccakCore();

    size_t capacity() const;
    void setCapacity(size_t capacity);

    size_t blockSize() const { return _blockSize; }

    void reset();

    void update(const void *data, size_t size);
    void pad(uint8_t tag);

    void extract(void *data, size_t size);
    void encrypt(void *output, const void *input, size_t size);

    void clear();

    void setHMACKey(const void *key, size_t len, uint8_t pad, size_t hashSize);

private:
    struct {
        uint64_t A[5][5];
        uint8_t inputSize;
        uint8_t outputSize;
    } state;
    uint8_t _blockSize;

    void keccakp();
};
# 28 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.h" 2

class SHAKE : public XOF
{
public:
    virtual ~SHAKE();

    size_t blockSize() const;

    void reset();
    void update(const void *data, size_t len);

    void extend(uint8_t *data, size_t len);
    void encrypt(uint8_t *output, const uint8_t *input, size_t len);

    void clear();

protected:
    SHAKE(size_t capacity);

private:
    KeccakCore core;
    bool finalized;
};

class SHAKE128 : public SHAKE
{
public:
    SHAKE128() : SHAKE(256) {}
    virtual ~SHAKE128();
};

class SHAKE256 : public SHAKE
{
public:
    SHAKE256() : SHAKE(512) {}
    virtual ~SHAKE256();
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp" 2
# 40 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
SHAKE::SHAKE(size_t capacity)
    : finalized(false)
{
    core.setCapacity(capacity);
}




SHAKE::~SHAKE()
{
}

size_t SHAKE::blockSize() const
{
    return core.blockSize();
}

void SHAKE::reset()
{
    core.reset();
    finalized = false;
}

void SHAKE::update(const void *data, size_t len)
{
    if (finalized)
        reset();
    core.update(data, len);
}

void SHAKE::extend(uint8_t *data, size_t len)
{
    if (!finalized) {
        core.pad(0x1F);
        finalized = true;
    }
    core.extract(data, len);
}

void SHAKE::encrypt(uint8_t *output, const uint8_t *input, size_t len)
{
    if (!finalized) {
        core.pad(0x1F);
        finalized = true;
    }
    core.encrypt(output, input, len);
}

void SHAKE::clear()
{
    core.clear();
    finalized = false;
}
# 113 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
SHAKE128::~SHAKE128()
{
}
# 135 "/home/whistleblower/.platformio/lib/Crypto/SHAKE.cpp"
SHAKE256::~SHAKE256()
{
}
