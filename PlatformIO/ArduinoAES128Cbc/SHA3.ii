# 1 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/SHA3.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/SHA3.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/KeccakCore.h"
class KeccakCore
{
public:
    KeccakCore();
    ~KeccakCore();

    size_t capacity() const;
    void setCapacity(size_t capacity);

    size_t blockSize() const { return _blockSize; }

    void reset();

    void update(const void *data, size_t size);
    void pad(uint8_t tag);

    void extract(void *data, size_t size);
    void encrypt(void *output, const void *input, size_t size);

    void clear();

    void setHMACKey(const void *key, size_t len, uint8_t pad, size_t hashSize);

private:
    struct {
        uint64_t A[5][5];
        uint8_t inputSize;
        uint8_t outputSize;
    } state;
    uint8_t _blockSize;

    void keccakp();
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/SHA3.h" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Hash.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Hash.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Hash.h" 2

class Hash
{
public:
    Hash();
    virtual ~Hash();

    virtual size_t hashSize() const = 0;
    virtual size_t blockSize() const = 0;

    virtual void reset() = 0;
    virtual void update(const void *data, size_t len) = 0;
    virtual void finalize(void *hash, size_t len) = 0;

    virtual void clear() = 0;

    virtual void resetHMAC(const void *key, size_t keyLen) = 0;
    virtual void finalizeHMAC(const void *key, size_t keyLen, void *hash, size_t hashLen) = 0;

protected:
    void formatHMACKey(void *block, const void *key, size_t len, uint8_t pad);
};
# 28 "/home/whistleblower/.platformio/lib/Crypto/SHA3.h" 2

class SHA3_256 : public Hash
{
public:
    SHA3_256();
    virtual ~SHA3_256();

    size_t hashSize() const;
    size_t blockSize() const;

    void reset();
    void update(const void *data, size_t len);
    void finalize(void *hash, size_t len);

    void clear();

    void resetHMAC(const void *key, size_t keyLen);
    void finalizeHMAC(const void *key, size_t keyLen, void *hash, size_t hashLen);

private:
    KeccakCore core;
};

class SHA3_512 : public Hash
{
public:
    SHA3_512();
    virtual ~SHA3_512();

    size_t hashSize() const;
    size_t blockSize() const;

    void reset();
    void update(const void *data, size_t len);
    void finalize(void *hash, size_t len);

    void clear();

    void resetHMAC(const void *key, size_t keyLen);
    void finalizeHMAC(const void *key, size_t keyLen, void *hash, size_t hashLen);

private:
    KeccakCore core;
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 2

void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
}

bool secure_compare(const void *data1, const void *data2, size_t len);
# 25 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp" 2
# 38 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp"
SHA3_256::SHA3_256()
{
    core.setCapacity(512);
}




SHA3_256::~SHA3_256()
{

}

size_t SHA3_256::hashSize() const
{
    return 32;
}

size_t SHA3_256::blockSize() const
{
    return core.blockSize();
}

void SHA3_256::reset()
{
    core.reset();
}

void SHA3_256::update(const void *data, size_t len)
{
    core.update(data, len);
}

void SHA3_256::finalize(void *hash, size_t len)
{

    core.pad(0x06);
    core.extract(hash, len);
}

void SHA3_256::clear()
{
    core.clear();
}

void SHA3_256::resetHMAC(const void *key, size_t keyLen)
{
    core.setHMACKey(key, keyLen, 0x36, 32);
}

void SHA3_256::finalizeHMAC(const void *key, size_t keyLen, void *hash, size_t hashLen)
{
    uint8_t temp[32];
    finalize(temp, sizeof(temp));
    core.setHMACKey(key, keyLen, 0x5C, 32);
    core.update(temp, sizeof(temp));
    finalize(hash, hashLen);
    clean(temp);
}
# 110 "/home/whistleblower/.platformio/lib/Crypto/SHA3.cpp"
SHA3_512::SHA3_512()
{
    core.setCapacity(1024);
}




SHA3_512::~SHA3_512()
{

}

size_t SHA3_512::hashSize() const
{
    return 64;
}

size_t SHA3_512::blockSize() const
{
    return core.blockSize();
}

void SHA3_512::reset()
{
    core.reset();
}

void SHA3_512::update(const void *data, size_t len)
{
    core.update(data, len);
}

void SHA3_512::finalize(void *hash, size_t len)
{

    core.pad(0x06);
    core.extract(hash, len);
}

void SHA3_512::clear()
{
    core.clear();
}

void SHA3_512::resetHMAC(const void *key, size_t keyLen)
{
    core.setHMACKey(key, keyLen, 0x36, 64);
}

void SHA3_512::finalizeHMAC(const void *key, size_t keyLen, void *hash, size_t hashLen)
{
    uint8_t temp[64];
    finalize(temp, sizeof(temp));
    core.setHMACKey(key, keyLen, 0x5C, 64);
    core.update(temp, sizeof(temp));
    finalize(hash, hashLen);
    clean(temp);
}
