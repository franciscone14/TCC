# 1 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/AES.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/AES.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
class BlockCipher
{
public:
    BlockCipher();
    virtual ~BlockCipher();

    virtual size_t blockSize() const = 0;
    virtual size_t keySize() const = 0;

    virtual bool setKey(const uint8_t *key, size_t len) = 0;

    virtual void encryptBlock(uint8_t *output, const uint8_t *input) = 0;
    virtual void decryptBlock(uint8_t *output, const uint8_t *input) = 0;

    virtual void clear() = 0;
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/AES.h" 2
# 37 "/home/whistleblower/.platformio/lib/Crypto/AES.h"
class AESTiny128;
class AESTiny256;
class AESSmall128;
class AESSmall256;

class AESCommon : public BlockCipher
{
public:
    virtual ~AESCommon();

    size_t blockSize() const;

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

protected:
    AESCommon();


    uint8_t rounds;
    uint8_t *schedule;

    static void subBytesAndShiftRows(uint8_t *output, const uint8_t *input);
    static void inverseShiftRowsAndSubBytes(uint8_t *output, const uint8_t *input);
    static void mixColumn(uint8_t *output, uint8_t *input);
    static void inverseMixColumn(uint8_t *output, const uint8_t *input);
    static void keyScheduleCore(uint8_t *output, const uint8_t *input, uint8_t iteration);
    static void applySbox(uint8_t *output, const uint8_t *input);


    friend class AESTiny128;
    friend class AESTiny256;
    friend class AESSmall128;
    friend class AESSmall256;
};

class AES128 : public AESCommon
{
public:
    AES128();
    virtual ~AES128();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[176];
};

class AES192 : public AESCommon
{
public:
    AES192();
    virtual ~AES192();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[208];
};

class AES256 : public AESCommon
{
public:
    AES256();
    virtual ~AES256();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[240];
};

class AESTiny256 : public BlockCipher
{
public:
    AESTiny256();
    virtual ~AESTiny256();

    size_t blockSize() const;
    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t schedule[32];
};

class AESSmall256 : public AESTiny256
{
public:
    AESSmall256();
    virtual ~AESSmall256();

    bool setKey(const uint8_t *key, size_t len);

    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t reverse[32];
};

class AESTiny128 : public BlockCipher
{
public:
    AESTiny128();
    virtual ~AESTiny128();

    size_t blockSize() const;
    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t schedule[16];
};

class AESSmall128 : public AESTiny128
{
public:
    AESSmall128();
    virtual ~AESSmall128();

    bool setKey(const uint8_t *key, size_t len);

    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t reverse[16];
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 2

void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
}

bool secure_compare(const void *data1, const void *data2, size_t len);
# 25 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 1 3
# 89 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 90 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 2 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 1 3
# 99 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/sfr_defs.h" 1 3
# 100 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 272 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/iom328p.h" 1 3
# 273 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 627 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/portpins.h" 1 3
# 628 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3

# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/common.h" 1 3
# 630 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3

# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/version.h" 1 3
# 632 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3






# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 1 3
# 239 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 3

# 239 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3


# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/lock.h" 1 3
# 642 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/io.h" 2 3
# 91 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 2 3
# 116 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern "C" {
# 1158 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const void * memchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1172 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int memcmp_P(const void *, const void *, size_t) __attribute__((__pure__));






extern void *memccpy_P(void *, const void *, int __val, size_t);
# 1188 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_P(void *, const void *, size_t);






extern void *memmem_P(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 1207 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const void * memrchr_P(const void *, int __val, size_t __len) __attribute__((__const__));
# 1217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcat_P(char *, const char *);
# 1233 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strchr_P(const char *, int __val) __attribute__((__const__));
# 1245 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strchrnul_P(const char *, int __val) __attribute__((__const__));
# 1258 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcmp_P(const char *, const char *) __attribute__((__pure__));
# 1268 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_P(char *, const char *);
# 1285 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_P(const char *, const char *) __attribute__((__pure__));






extern char *strcasestr_P(const char *, const char *) __attribute__((__pure__));
# 1305 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strcspn_P(const char *__s, const char * __reject) __attribute__((__pure__));
# 1321 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_P (char *, const char *, size_t );
# 1334 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_P (char *, const char *, size_t );
# 1346 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_P(const char *, size_t) __attribute__((__const__));
# 1357 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1376 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_P(const char *, const char *, size_t) __attribute__((__pure__));
# 1387 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncat_P(char *, const char *, size_t);
# 1401 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_P(char *, const char *, size_t);
# 1416 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strpbrk_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1427 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern const char * strrchr_P(const char *, int __val) __attribute__((__const__));
# 1447 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strsep_P(char **__sp, const char * __delim);
# 1460 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strspn_P(const char *__s, const char * __accept) __attribute__((__pure__));
# 1474 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strstr_P(const char *, const char *) __attribute__((__pure__));
# 1496 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strtok_P(char *__s, const char * __delim);
# 1516 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strtok_rP(char *__s, const char * __delim, char **__last);
# 1529 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlen_PF(uint_farptr_t src) __attribute__((__const__));
# 1545 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strnlen_PF(uint_farptr_t src, size_t len) __attribute__((__const__));
# 1560 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern void *memcpy_PF(void *dest, uint_farptr_t src, size_t len);
# 1575 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcpy_PF(char *dest, uint_farptr_t src);
# 1595 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncpy_PF(char *dest, uint_farptr_t src, size_t len);
# 1611 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strcat_PF(char *dest, uint_farptr_t src);
# 1632 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcat_PF(char *dst, uint_farptr_t src, size_t siz);
# 1649 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strncat_PF(char *dest, uint_farptr_t src, size_t len);
# 1665 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1682 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1698 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strcasecmp_PF(const char *s1, uint_farptr_t s2) __attribute__((__pure__));
# 1716 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) __attribute__((__pure__));
# 1732 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern char *strstr_PF(const char *s1, uint_farptr_t s2);
# 1744 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz);
# 1760 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern int memcmp_PF(const void *, uint_farptr_t, size_t) __attribute__((__pure__));
# 1779 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/avr/pgmspace.h" 3
extern size_t __strlen_P(const char *) __attribute__((__const__));
__attribute__((__always_inline__)) static __inline__ size_t strlen_P(const char * s);
static __inline__ size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
}



}
# 28 "/home/whistleblower/.platformio/lib/Crypto/utility/ProgMemUtil.h" 2
# 26 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 2
# 51 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"

# 51 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
static uint8_t const sbox[256] 
# 51 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
                              __attribute__((__progmem__)) 
# 51 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                      = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
    0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
    0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
    0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
    0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
    0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
    0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
    0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
    0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
    0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
    0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
    0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
    0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
    0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
    0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
    0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
    0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};


static uint8_t const sbox_inverse[256] 
# 87 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
                                      __attribute__((__progmem__)) 
# 87 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                              = {
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
    0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
    0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
    0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
    0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
    0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
    0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
    0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
    0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
    0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
    0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
    0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
    0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
    0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
    0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
    0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};






AESCommon::AESCommon()
    : rounds(0), schedule(0)
{
}





AESCommon::~AESCommon()
{
}





size_t AESCommon::blockSize() const
{
    return 16;
}



static uint8_t const K[8] = {
    0x00,
    0x1B,
    (0x1B << 1),
    (0x1B << 1) ^ 0x1B,
    (0x1B << 2),
    (0x1B << 2) ^ 0x1B,
    (0x1B << 2) ^ (0x1B << 1),
    (0x1B << 2) ^ (0x1B << 1) ^ 0x1B
};
# 186 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
void AESCommon::subBytesAndShiftRows(uint8_t *output, const uint8_t *input)
{
    output[(0) * 4 + (0)] = 
# 188 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 188 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(0) * 4 + (0)]
# 188 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 188 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(0) * 4 + (1)] = 
# 189 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 189 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(1) * 4 + (1)]
# 189 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 189 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(0) * 4 + (2)] = 
# 190 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 190 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(2) * 4 + (2)]
# 190 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 190 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(0) * 4 + (3)] = 
# 191 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 191 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(3) * 4 + (3)]
# 191 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 191 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(1) * 4 + (0)] = 
# 192 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 192 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(1) * 4 + (0)]
# 192 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 192 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(1) * 4 + (1)] = 
# 193 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 193 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(2) * 4 + (1)]
# 193 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 193 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(1) * 4 + (2)] = 
# 194 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 194 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(3) * 4 + (2)]
# 194 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 194 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(1) * 4 + (3)] = 
# 195 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 195 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(0) * 4 + (3)]
# 195 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 195 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(2) * 4 + (0)] = 
# 196 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 196 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(2) * 4 + (0)]
# 196 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 196 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(2) * 4 + (1)] = 
# 197 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 197 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(3) * 4 + (1)]
# 197 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 197 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(2) * 4 + (2)] = 
# 198 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 198 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(0) * 4 + (2)]
# 198 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 198 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(2) * 4 + (3)] = 
# 199 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 199 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(1) * 4 + (3)]
# 199 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 199 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(3) * 4 + (0)] = 
# 200 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 200 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(3) * 4 + (0)]
# 200 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 200 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(3) * 4 + (1)] = 
# 201 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 201 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(0) * 4 + (1)]
# 201 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 201 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(3) * 4 + (2)] = 
# 202 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 202 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(1) * 4 + (2)]
# 202 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 202 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[(3) * 4 + (3)] = 
# 203 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 203 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[(2) * 4 + (3)]
# 203 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 203 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
}

void AESCommon::inverseShiftRowsAndSubBytes(uint8_t *output, const uint8_t *input)
{
    output[(0) * 4 + (0)] = 
# 208 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 208 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(0) * 4 + (0)]
# 208 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 208 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(0) * 4 + (1)] = 
# 209 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 209 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(3) * 4 + (1)]
# 209 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 209 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(0) * 4 + (2)] = 
# 210 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 210 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(2) * 4 + (2)]
# 210 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 210 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(0) * 4 + (3)] = 
# 211 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 211 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(1) * 4 + (3)]
# 211 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 211 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(1) * 4 + (0)] = 
# 212 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 212 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(1) * 4 + (0)]
# 212 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 212 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(1) * 4 + (1)] = 
# 213 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 213 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(0) * 4 + (1)]
# 213 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 213 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(1) * 4 + (2)] = 
# 214 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 214 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(3) * 4 + (2)]
# 214 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 214 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(1) * 4 + (3)] = 
# 215 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 215 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(2) * 4 + (3)]
# 215 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 215 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(2) * 4 + (0)] = 
# 216 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 216 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(2) * 4 + (0)]
# 216 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 216 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(2) * 4 + (1)] = 
# 217 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 217 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(1) * 4 + (1)]
# 217 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 217 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(2) * 4 + (2)] = 
# 218 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 218 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(0) * 4 + (2)]
# 218 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 218 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(2) * 4 + (3)] = 
# 219 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 219 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(3) * 4 + (3)]
# 219 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 219 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(3) * 4 + (0)] = 
# 220 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 220 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(3) * 4 + (0)]
# 220 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 220 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(3) * 4 + (1)] = 
# 221 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 221 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(2) * 4 + (1)]
# 221 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 221 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(3) * 4 + (2)] = 
# 222 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 222 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(1) * 4 + (2)]
# 222 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 222 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
    output[(3) * 4 + (3)] = 
# 223 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 223 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox_inverse + input[(0) * 4 + (3)]
# 223 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 223 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                     ;
}

void AESCommon::mixColumn(uint8_t *output, uint8_t *input)
{
    uint16_t t;
    uint8_t a = input[0];
    uint8_t b = input[1];
    uint8_t c = input[2];
    uint8_t d = input[3];
    uint8_t a2 = (t = ((uint16_t)(a)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t b2 = (t = ((uint16_t)(b)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t c2 = (t = ((uint16_t)(c)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t d2 = (t = ((uint16_t)(d)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    output[0] = a2 ^ b2 ^ b ^ c ^ d;
    output[1] = a ^ b2 ^ c2 ^ c ^ d;
    output[2] = a ^ b ^ c2 ^ d2 ^ d;
    output[3] = a2 ^ a ^ b ^ c ^ d2;
}

void AESCommon::inverseMixColumn(uint8_t *output, const uint8_t *input)
{
    uint16_t t;
    uint8_t a = input[0];
    uint8_t b = input[1];
    uint8_t c = input[2];
    uint8_t d = input[3];
    uint8_t a2 = (t = ((uint16_t)(a)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t b2 = (t = ((uint16_t)(b)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t c2 = (t = ((uint16_t)(c)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t d2 = (t = ((uint16_t)(d)) << 1, ((uint8_t)t) ^ (uint8_t)(0x1B * ((uint8_t)(t >> 8))));
    uint8_t a4 = (t = ((uint16_t)(a)) << 2, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t b4 = (t = ((uint16_t)(b)) << 2, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t c4 = (t = ((uint16_t)(c)) << 2, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t d4 = (t = ((uint16_t)(d)) << 2, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t a8 = (t = ((uint16_t)(a)) << 3, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t b8 = (t = ((uint16_t)(b)) << 3, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t c8 = (t = ((uint16_t)(c)) << 3, ((uint8_t)t) ^ K[t >> 8]);
    uint8_t d8 = (t = ((uint16_t)(d)) << 3, ((uint8_t)t) ^ K[t >> 8]);
    output[0] = a8 ^ a4 ^ a2 ^ b8 ^ b2 ^ b ^ c8 ^ c4 ^ c ^ d8 ^ d;
    output[1] = a8 ^ a ^ b8 ^ b4 ^ b2 ^ c8 ^ c2 ^ c ^ d8 ^ d4 ^ d;
    output[2] = a8 ^ a4 ^ a ^ b8 ^ b ^ c8 ^ c4 ^ c2 ^ d8 ^ d2 ^ d;
    output[3] = a8 ^ a2 ^ a ^ b8 ^ b4 ^ b ^ c8 ^ c ^ d8 ^ d4 ^ d2;
}



void AESCommon::encryptBlock(uint8_t *output, const uint8_t *input)
{
    const uint8_t *roundKey = schedule;
    uint8_t posn;
    uint8_t round;
    uint8_t state1[16];
    uint8_t state2[16];


    for (posn = 0; posn < 16; ++posn)
        state1[posn] = input[posn] ^ roundKey[posn];
    roundKey += 16;


    for (round = rounds; round > 1; --round) {
        subBytesAndShiftRows(state2, state1);
        mixColumn(state1, state2);
        mixColumn(state1 + 4, state2 + 4);
        mixColumn(state1 + 8, state2 + 8);
        mixColumn(state1 + 12, state2 + 12);
        for (posn = 0; posn < 16; ++posn)
            state1[posn] ^= roundKey[posn];
        roundKey += 16;
    }


    subBytesAndShiftRows(state2, state1);
    for (posn = 0; posn < 16; ++posn)
        output[posn] = state2[posn] ^ roundKey[posn];
}

void AESCommon::decryptBlock(uint8_t *output, const uint8_t *input)
{
    const uint8_t *roundKey = schedule + rounds * 16;
    uint8_t round;
    uint8_t posn;
    uint8_t state1[16];
    uint8_t state2[16];


    for (posn = 0; posn < 16; ++posn)
        state1[posn] = input[posn] ^ roundKey[posn];
    inverseShiftRowsAndSubBytes(state2, state1);


    for (round = rounds; round > 1; --round) {
        roundKey -= 16;
        for (posn = 0; posn < 16; ++posn)
            state2[posn] ^= roundKey[posn];
        inverseMixColumn(state1, state2);
        inverseMixColumn(state1 + 4, state2 + 4);
        inverseMixColumn(state1 + 8, state2 + 8);
        inverseMixColumn(state1 + 12, state2 + 12);
        inverseShiftRowsAndSubBytes(state2, state1);
    }


    roundKey -= 16;
    for (posn = 0; posn < 16; ++posn)
        output[posn] = state2[posn] ^ roundKey[posn];
}

void AESCommon::clear()
{
    clean(schedule, (rounds + 1) * 16);
}



void AESCommon::keyScheduleCore(uint8_t *output, const uint8_t *input, uint8_t iteration)
{


    static uint8_t const rcon[11] 
# 343 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
                                 __attribute__((__progmem__)) 
# 343 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                         = {
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
        0x80, 0x1B, 0x36
    };
    output[0] = 
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[1]
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; })) 
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                              ^ 
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
                                                (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                rcon + iteration
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
                                                )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 347 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                                                               ;
    output[1] = 
# 348 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 348 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[2]
# 348 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 348 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[2] = 
# 349 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 349 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[3]
# 349 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 349 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[3] = 
# 350 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 350 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[0]
# 350 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 350 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
}

void AESCommon::applySbox(uint8_t *output, const uint8_t *input)
{
    output[0] = 
# 355 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 355 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[0]
# 355 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 355 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[1] = 
# 356 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 356 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[1]
# 356 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 356 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[2] = 
# 357 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 357 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[2]
# 357 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 357 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
    output[3] = 
# 358 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               (__extension__({ uint16_t __addr16 = (uint16_t)((uint16_t)(
# 358 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
               sbox + input[3]
# 358 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp" 3
               )); uint8_t __result; __asm__ __volatile__ ( "lpm %0, Z" "\n\t" : "=r" (__result) : "z" (__addr16) ); __result; }))
# 358 "/home/whistleblower/.platformio/lib/Crypto/AESCommon.cpp"
                                             ;
}
