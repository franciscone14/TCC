# 1 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
# 23 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
# 1 "/home/whistleblower/.platformio/lib/Crypto/AES.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/AES.h"
# 1 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 1
# 26 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 1 3
# 37 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 1 3 4
# 9 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 3 4
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 1 3 4
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4

# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stdint.h" 2 3 4
# 38 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 2 3
# 77 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 27 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 149 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 216 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef unsigned int size_t;
# 426 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 28 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h" 2


# 29 "/home/whistleblower/.platformio/lib/Crypto/BlockCipher.h"
class BlockCipher
{
public:
    BlockCipher();
    virtual ~BlockCipher();

    virtual size_t blockSize() const = 0;
    virtual size_t keySize() const = 0;

    virtual bool setKey(const uint8_t *key, size_t len) = 0;

    virtual void encryptBlock(uint8_t *output, const uint8_t *input) = 0;
    virtual void decryptBlock(uint8_t *output, const uint8_t *input) = 0;

    virtual void clear() = 0;
};
# 27 "/home/whistleblower/.platformio/lib/Crypto/AES.h" 2
# 37 "/home/whistleblower/.platformio/lib/Crypto/AES.h"
class AESTiny128;
class AESTiny256;
class AESSmall128;
class AESSmall256;

class AESCommon : public BlockCipher
{
public:
    virtual ~AESCommon();

    size_t blockSize() const;

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

protected:
    AESCommon();


    uint8_t rounds;
    uint8_t *schedule;

    static void subBytesAndShiftRows(uint8_t *output, const uint8_t *input);
    static void inverseShiftRowsAndSubBytes(uint8_t *output, const uint8_t *input);
    static void mixColumn(uint8_t *output, uint8_t *input);
    static void inverseMixColumn(uint8_t *output, const uint8_t *input);
    static void keyScheduleCore(uint8_t *output, const uint8_t *input, uint8_t iteration);
    static void applySbox(uint8_t *output, const uint8_t *input);


    friend class AESTiny128;
    friend class AESTiny256;
    friend class AESSmall128;
    friend class AESSmall256;
};

class AES128 : public AESCommon
{
public:
    AES128();
    virtual ~AES128();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[176];
};

class AES192 : public AESCommon
{
public:
    AES192();
    virtual ~AES192();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[208];
};

class AES256 : public AESCommon
{
public:
    AES256();
    virtual ~AES256();

    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

private:
    uint8_t sched[240];
};

class AESTiny256 : public BlockCipher
{
public:
    AESTiny256();
    virtual ~AESTiny256();

    size_t blockSize() const;
    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t schedule[32];
};

class AESSmall256 : public AESTiny256
{
public:
    AESSmall256();
    virtual ~AESSmall256();

    bool setKey(const uint8_t *key, size_t len);

    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t reverse[32];
};

class AESTiny128 : public BlockCipher
{
public:
    AESTiny128();
    virtual ~AESTiny128();

    size_t blockSize() const;
    size_t keySize() const;

    bool setKey(const uint8_t *key, size_t len);

    void encryptBlock(uint8_t *output, const uint8_t *input);
    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t schedule[16];
};

class AESSmall128 : public AESTiny128
{
public:
    AESSmall128();
    virtual ~AESSmall128();

    bool setKey(const uint8_t *key, size_t len);

    void decryptBlock(uint8_t *output, const uint8_t *input);

    void clear();

private:
    uint8_t reverse[16];
};
# 24 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp" 2
# 1 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 1
# 27 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h"
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 28 "/home/whistleblower/.platformio/lib/Crypto/Crypto.h" 2

void clean(void *dest, size_t size);

template <typename T>
inline void clean(T &var)
{
    clean(&var, sizeof(T));
}

bool secure_compare(const void *data1, const void *data2, size_t len);
# 25 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp" 2
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 1 3
# 46 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
# 1 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/lib/gcc/avr/5.4.0/include/stddef.h" 1 3 4
# 47 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 2 3
# 58 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3

# 58 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern "C" {
# 125 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int ffs(int __val) __attribute__((__const__));





extern int ffsl(long __val) __attribute__((__const__));





__extension__ extern int ffsll(long long __val) __attribute__((__const__));
# 150 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memccpy(void *, const void *, int, size_t);
# 162 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memchr(const void *, int, size_t) __attribute__((__pure__));
# 180 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int memcmp(const void *, const void *, size_t) __attribute__((__pure__));
# 191 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memcpy(void *, const void *, size_t);
# 203 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmem(const void *, size_t, const void *, size_t) __attribute__((__pure__));
# 213 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memmove(void *, const void *, size_t);
# 225 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memrchr(const void *, int, size_t) __attribute__((__pure__));
# 235 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern void *memset(void *, int, size_t);
# 248 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcat(char *, const char *);
# 262 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchr(const char *, int) __attribute__((__pure__));
# 274 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strchrnul(const char *, int) __attribute__((__pure__));
# 287 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcmp(const char *, const char *) __attribute__((__pure__));
# 305 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcpy(char *, const char *);
# 320 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strcasecmp(const char *, const char *) __attribute__((__pure__));
# 333 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strcasestr(const char *, const char *) __attribute__((__pure__));
# 344 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strcspn(const char *__s, const char *__reject) __attribute__((__pure__));
# 364 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strdup(const char *s1);
# 377 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcat(char *, const char *, size_t);
# 388 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlcpy(char *, const char *, size_t);
# 399 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strlen(const char *) __attribute__((__pure__));
# 411 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strlwr(char *);
# 422 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncat(char *, const char *, size_t);
# 434 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncmp(const char *, const char *, size_t) __attribute__((__pure__));
# 449 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strncpy(char *, const char *, size_t);
# 464 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern int strncasecmp(const char *, const char *, size_t) __attribute__((__pure__));
# 478 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strnlen(const char *, size_t) __attribute__((__pure__));
# 491 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strpbrk(const char *__s, const char *__accept) __attribute__((__pure__));
# 505 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrchr(const char *, int) __attribute__((__pure__));
# 515 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strrev(char *);
# 533 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strsep(char **, const char *);
# 544 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern size_t strspn(const char *__s, const char *__accept) __attribute__((__pure__));
# 557 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strstr(const char *, const char *) __attribute__((__pure__));
# 576 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok(char *, const char *);
# 593 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strtok_r(char *, const char *, char **);
# 606 "/home/whistleblower/.platformio/packages/toolchain-atmelavr/avr/include/string.h" 3
extern char *strupr(char *);



extern int strcoll(const char *s1, const char *s2);
extern char *strerror(int errnum);
extern size_t strxfrm(char *dest, const char *src, size_t n);



}
# 26 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp" 2
# 42 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"

# 42 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
AES256::AES256()
{
    rounds = 14;
    schedule = sched;
}

AES256::~AES256()
{
    clean(sched);
}





size_t AES256::keySize() const
{
    return 32;
}

bool AES256::setKey(const uint8_t *key, size_t len)
{
    if (len != 32)
        return false;


    uint8_t *schedule = sched;
    memcpy(schedule, key, 32);


    uint8_t iteration = 1;
    uint8_t n = 32;
    uint8_t w = 8;
    while (n < 240) {
        if (w == 8) {

            keyScheduleCore(schedule + 32, schedule + 28, iteration);
            schedule[32] ^= schedule[0];
            schedule[33] ^= schedule[1];
            schedule[34] ^= schedule[2];
            schedule[35] ^= schedule[3];
            ++iteration;
            w = 0;
        } else if (w == 4) {

            applySbox(schedule + 32, schedule + 28);
            schedule[32] ^= schedule[0];
            schedule[33] ^= schedule[1];
            schedule[34] ^= schedule[2];
            schedule[35] ^= schedule[3];
        } else {

            schedule[32] = schedule[28] ^ schedule[0];
            schedule[33] = schedule[29] ^ schedule[1];
            schedule[34] = schedule[30] ^ schedule[2];
            schedule[35] = schedule[31] ^ schedule[3];
        }


        schedule += 4;
        n += 4;
        ++w;
    }

    return true;
}
# 189 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
AESTiny256::AESTiny256()
{
}

AESTiny256::~AESTiny256()
{
    clean(schedule);
}





size_t AESTiny256::blockSize() const
{
    return 16;
}





size_t AESTiny256::keySize() const
{
    return 32;
}

bool AESTiny256::setKey(const uint8_t *key, size_t len)
{
    if (len == 32) {

        memcpy(schedule, key, 32);
        return true;
    }
    return false;
}

void AESTiny256::encryptBlock(uint8_t *output, const uint8_t *input)
{
    uint8_t schedule[32];
    uint8_t posn;
    uint8_t round;
    uint8_t state1[16];
    uint8_t state2[16];
    uint8_t temp[4];


    memcpy(schedule, this->schedule, 32);


    for (posn = 0; posn < 16; ++posn)
        state1[posn] = input[posn] ^ schedule[posn];
    do { AESCommon::subBytesAndShiftRows(state2, state1); AESCommon::mixColumn(state1, state2); AESCommon::mixColumn(state1 + 4, state2 + 4); AESCommon::mixColumn(state1 + 8, state2 + 8); AESCommon::mixColumn(state1 + 12, state2 + 12); for (posn = 0; posn < 16; ++posn) state1[posn] ^= schedule[posn + (16)]; } while (0);


    for (round = 1; round <= 6; ++round) {

        do { AESCommon::keyScheduleCore(temp, schedule + 28, (round)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);
        do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
        do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
        do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);
        do { AESCommon::applySbox(temp, schedule + 12); schedule[16] ^= temp[0]; schedule[17] ^= temp[1]; schedule[18] ^= temp[2]; schedule[19] ^= temp[3]; } while (0);
        do { schedule[(5) * 4] ^= schedule[(4) * 4]; schedule[(5) * 4 + 1] ^= schedule[(4) * 4 + 1]; schedule[(5) * 4 + 2] ^= schedule[(4) * 4 + 2]; schedule[(5) * 4 + 3] ^= schedule[(4) * 4 + 3]; } while (0);
        do { schedule[(6) * 4] ^= schedule[(5) * 4]; schedule[(6) * 4 + 1] ^= schedule[(5) * 4 + 1]; schedule[(6) * 4 + 2] ^= schedule[(5) * 4 + 2]; schedule[(6) * 4 + 3] ^= schedule[(5) * 4 + 3]; } while (0);
        do { schedule[(7) * 4] ^= schedule[(6) * 4]; schedule[(7) * 4 + 1] ^= schedule[(6) * 4 + 1]; schedule[(7) * 4 + 2] ^= schedule[(6) * 4 + 2]; schedule[(7) * 4 + 3] ^= schedule[(6) * 4 + 3]; } while (0);


        do { AESCommon::subBytesAndShiftRows(state2, state1); AESCommon::mixColumn(state1, state2); AESCommon::mixColumn(state1 + 4, state2 + 4); AESCommon::mixColumn(state1 + 8, state2 + 8); AESCommon::mixColumn(state1 + 12, state2 + 12); for (posn = 0; posn < 16; ++posn) state1[posn] ^= schedule[posn + (0)]; } while (0);
        do { AESCommon::subBytesAndShiftRows(state2, state1); AESCommon::mixColumn(state1, state2); AESCommon::mixColumn(state1 + 4, state2 + 4); AESCommon::mixColumn(state1 + 8, state2 + 8); AESCommon::mixColumn(state1 + 12, state2 + 12); for (posn = 0; posn < 16; ++posn) state1[posn] ^= schedule[posn + (16)]; } while (0);
    }


    do { AESCommon::keyScheduleCore(temp, schedule + 28, (7)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);
    do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
    do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
    do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);


    AESCommon::subBytesAndShiftRows(state2, state1);
    for (posn = 0; posn < 16; ++posn)
        output[posn] = state2[posn] ^ schedule[posn];
}

void AESTiny256::decryptBlock(uint8_t *output, const uint8_t *input)
{

}

void AESTiny256::clear()
{
    clean(schedule);
}
# 308 "/home/whistleblower/.platformio/lib/Crypto/AES256.cpp"
AESSmall256::AESSmall256()
{
}

AESSmall256::~AESSmall256()
{
    clean(reverse);
}

bool AESSmall256::setKey(const uint8_t *key, size_t len)
{
    uint8_t *schedule;
    uint8_t round;
    uint8_t temp[4];


    if (!AESTiny256::setKey(key, len))
        return false;




    schedule = reverse;
    memcpy(schedule, key, 32);
    for (round = 1; round <= 6; ++round) {
        do { AESCommon::keyScheduleCore(temp, schedule + 28, (round)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);
        do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
        do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
        do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);
        do { AESCommon::applySbox(temp, schedule + 12); schedule[16] ^= temp[0]; schedule[17] ^= temp[1]; schedule[18] ^= temp[2]; schedule[19] ^= temp[3]; } while (0);
        do { schedule[(5) * 4] ^= schedule[(4) * 4]; schedule[(5) * 4 + 1] ^= schedule[(4) * 4 + 1]; schedule[(5) * 4 + 2] ^= schedule[(4) * 4 + 2]; schedule[(5) * 4 + 3] ^= schedule[(4) * 4 + 3]; } while (0);
        do { schedule[(6) * 4] ^= schedule[(5) * 4]; schedule[(6) * 4 + 1] ^= schedule[(5) * 4 + 1]; schedule[(6) * 4 + 2] ^= schedule[(5) * 4 + 2]; schedule[(6) * 4 + 3] ^= schedule[(5) * 4 + 3]; } while (0);
        do { schedule[(7) * 4] ^= schedule[(6) * 4]; schedule[(7) * 4 + 1] ^= schedule[(6) * 4 + 1]; schedule[(7) * 4 + 2] ^= schedule[(6) * 4 + 2]; schedule[(7) * 4 + 3] ^= schedule[(6) * 4 + 3]; } while (0);
    }
    do { AESCommon::keyScheduleCore(temp, schedule + 28, (7)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);
    do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
    do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
    do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);


    return true;
}

void AESSmall256::decryptBlock(uint8_t *output, const uint8_t *input)
{
    uint8_t schedule[32];
    uint8_t round;
    uint8_t posn;
    uint8_t state1[16];
    uint8_t state2[16];
    uint8_t temp[4];


    memcpy(schedule, reverse, 32);


    for (posn = 0; posn < 16; ++posn)
        state1[posn] = input[posn] ^ schedule[posn];
    AESCommon::inverseShiftRowsAndSubBytes(state2, state1);
    do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);
    do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
    do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
    do { AESCommon::keyScheduleCore(temp, schedule + 28, (7)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);


    for (round = 6; round >= 1; --round) {

        do { for (posn = 0; posn < 16; ++posn) state2[posn] ^= schedule[posn + (16)]; AESCommon::inverseMixColumn(state1, state2); AESCommon::inverseMixColumn(state1 + 4, state2 + 4); AESCommon::inverseMixColumn(state1 + 8, state2 + 8); AESCommon::inverseMixColumn(state1 + 12, state2 + 12); AESCommon::inverseShiftRowsAndSubBytes(state2, state1); } while (0);
        do { for (posn = 0; posn < 16; ++posn) state2[posn] ^= schedule[posn + (0)]; AESCommon::inverseMixColumn(state1, state2); AESCommon::inverseMixColumn(state1 + 4, state2 + 4); AESCommon::inverseMixColumn(state1 + 8, state2 + 8); AESCommon::inverseMixColumn(state1 + 12, state2 + 12); AESCommon::inverseShiftRowsAndSubBytes(state2, state1); } while (0);


        do { schedule[(7) * 4] ^= schedule[(6) * 4]; schedule[(7) * 4 + 1] ^= schedule[(6) * 4 + 1]; schedule[(7) * 4 + 2] ^= schedule[(6) * 4 + 2]; schedule[(7) * 4 + 3] ^= schedule[(6) * 4 + 3]; } while (0);
        do { schedule[(6) * 4] ^= schedule[(5) * 4]; schedule[(6) * 4 + 1] ^= schedule[(5) * 4 + 1]; schedule[(6) * 4 + 2] ^= schedule[(5) * 4 + 2]; schedule[(6) * 4 + 3] ^= schedule[(5) * 4 + 3]; } while (0);
        do { schedule[(5) * 4] ^= schedule[(4) * 4]; schedule[(5) * 4 + 1] ^= schedule[(4) * 4 + 1]; schedule[(5) * 4 + 2] ^= schedule[(4) * 4 + 2]; schedule[(5) * 4 + 3] ^= schedule[(4) * 4 + 3]; } while (0);
        do { AESCommon::applySbox(temp, schedule + 12); schedule[16] ^= temp[0]; schedule[17] ^= temp[1]; schedule[18] ^= temp[2]; schedule[19] ^= temp[3]; } while (0);
        do { schedule[(3) * 4] ^= schedule[(2) * 4]; schedule[(3) * 4 + 1] ^= schedule[(2) * 4 + 1]; schedule[(3) * 4 + 2] ^= schedule[(2) * 4 + 2]; schedule[(3) * 4 + 3] ^= schedule[(2) * 4 + 3]; } while (0);
        do { schedule[(2) * 4] ^= schedule[(1) * 4]; schedule[(2) * 4 + 1] ^= schedule[(1) * 4 + 1]; schedule[(2) * 4 + 2] ^= schedule[(1) * 4 + 2]; schedule[(2) * 4 + 3] ^= schedule[(1) * 4 + 3]; } while (0);
        do { schedule[(1) * 4] ^= schedule[(0) * 4]; schedule[(1) * 4 + 1] ^= schedule[(0) * 4 + 1]; schedule[(1) * 4 + 2] ^= schedule[(0) * 4 + 2]; schedule[(1) * 4 + 3] ^= schedule[(0) * 4 + 3]; } while (0);
        do { AESCommon::keyScheduleCore(temp, schedule + 28, (round)); schedule[0] ^= temp[0]; schedule[1] ^= temp[1]; schedule[2] ^= temp[2]; schedule[3] ^= temp[3]; } while (0);
    }


    do { for (posn = 0; posn < 16; ++posn) state2[posn] ^= schedule[posn + (16)]; AESCommon::inverseMixColumn(state1, state2); AESCommon::inverseMixColumn(state1 + 4, state2 + 4); AESCommon::inverseMixColumn(state1 + 8, state2 + 8); AESCommon::inverseMixColumn(state1 + 12, state2 + 12); AESCommon::inverseShiftRowsAndSubBytes(state2, state1); } while (0);
    for (posn = 0; posn < 16; ++posn)
        output[posn] = state2[posn] ^ schedule[posn];
}

void AESSmall256::clear()
{
    clean(reverse);
    AESTiny256::clear();
}
